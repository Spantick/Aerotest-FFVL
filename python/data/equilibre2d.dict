#################################
# Data pour calcul équilibre 2d
#################################
# Utilisé par le pré-processeur élastique et/ou le pos-processeur aéro afin de
#   - pré-positionner le parapente avant calcul élastique.
#   - calculer les caractéristiques de vol (vitesse, finesse, Vz,...) (post-aéro)
# Fichier à compléter et/ou modifier suivant les valeurs désirées
# [obsolete=>cf aero.dat] les data utilisées par cmarc sont décrites en fin de fichier
# [obsolete=>cf aero.dat] les data calculées par Polaires aussi
# les data calculées par ParapenteAxile aussi
# unité en S.I. (m, kg, s)
##########################
# Les coordonnées sont exprimées dans le repère voile,
# d'origine le bord d'attaque du caisson central, de vecteurs iv(,jv),kv,
#  - iv porté par la corde centrale, vers l'arrière,
#  - kv vertical, vers le haut.
#C'EST LE MÊME QUE LE REPÈRE 3D AERODYNAMIQUE, privé de jv
# Origine BA caisson central
#  iv => arrière
#  jv => droite
#  kv => haut

dict(
  userdata=dict(
      d  = 0.0,                     # float, % de freins entre 0.0 et 100.0 [non implémenté]
      #mp = 1750.0,                   # float, masse pilote
      mp = 180.0,                   # float, masse pilote
      mv = 7.5,                     # float, masse voile (tissu seulement, le
                                    #     poids de l'air est compensé par Archimède)
      ma = 14.0,                    # float masse air contenu (pour effets dynamiques)
      Cx0 = 0.01,                   # float, coefficient de traînée voile
                                    #       (frottement+forme).
      Cxp = 0.01,                  # float, coefficient de traînée pilote.
      Cxs = 0.01,                  # float, coefficient de traînée suspentage.
      alfas = 15.0,                 # float, incidence décrochage (stall)
      alfac = None,                 # float, incidence fermeture (collapse) Marche pas bien
      ),                            # c'est tout ici

#############################################################################
### calculé par ParapenteAxile.data2d() ou bien data utilisateur
#############################################################################
  parapente=dict(
      session='Sora',               # str, nom de la voile (session).
      b = 7.45,                      # float, demi-envergure vraie.
      S = 41.5,                       # float, surface vraie.
      Sp= 34.8,                     #surface projetée
      #l = 3.7 ,                     # float, corde centrale vraie.
      l = 2.8 ,                     # float, corde moyenne vraie.
      s = 8.8,                      # float, longueur du cône de suspentage.
                                    # float, P et Q étant la position du pilote
                                    #     et la proj. orthogonale du pilote sur
                                    #     la corde centrale, on a s=dist(P,Q).
                                    #
      xGv = 2.0,                    # float position (en x) du centre de gravité
                                    #      de la voile xGv>0.
      zGv = -1.0,                   # float, position (en z) du centre de gravité
                                    #      de la voile zGv<0.
      c = 0.25,                     # float, calage, i.e. position de Q en %de
                                    #     corde centrale
                                    #     i.e. AQ/b, A=bord d'attaque au centre
                                    #     de la voile.
      zs = -3,                      # float, altitude du point d'application de
                                    #     la trainée suspente. zs<0.
      #lambda = 5.35, 
      #deltaV : 38/55 km/h, 
      #deltaCalage 115 mm, 
      #corde moyenne = 2.8 m
      #corde centrale = 3.7 m
      )
  )
###############################################################################
# data utilisées par cmarc => dans le fichier polaires
###############################################################################
#        b0  = P.b0,                  # float, demi-envergure de référence
                                      #     (utilisée par Cmarc).
#        S0  = P.S0,                  # float, surface de référence
                                      #     (utilisée par Cmarc).
#        l0  = P.l0                   # float, corde de référence
###############################################################################
# data calculées par Polaires. P est une instance de class Polaires
###############################################################################
#        Cz = lambda a,d:(P.Cz)(a),   # function coef portance
                                      #     (calculé par cmarc)
#        Cx = lambda a,d:(P.Cx)(a),   # function coef trainée
                                      #     (calculé par cmarc)
#        Cm = lambda a,d:(P.Cm)(a),   # function coef moment
                                      #     (calculé par cmarc)
# Exemple d'utilisation : cf equilibre2d.py, fonction testPolaires()
###############################################################################
